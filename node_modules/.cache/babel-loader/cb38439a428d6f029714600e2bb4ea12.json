{"ast":null,"code":"var _jsxFileName = \"/Users/mirandamo/Documents/3rd_Year/TA_CS1300/1300Development/src/components/Shop.js\";\nimport React from \"react\";\nimport \"../App.css\";\nimport ProductGrid from \"./ProductGrid\";\nimport Cart from \"./Cart\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n/**\n * This class contains all of the web app's major functionalities. This includes filtering, sorting, add to/remove from cart, and \n * increase/decrease quantity. \n */\n\nclass Shop extends React.Component {\n  constructor(props) {\n    super(props); // A state is a variable or set of variables which is remembered when the component re-renders.\n    //TODO: Add additional state variables within this.state for another filter and a price sort, then set them to a default value. Remember, states can also be functions!\n\n    this.onSelectFilterSize = event => {\n      this.setState({\n        size: event\n      });\n    };\n\n    this.matchesFilterSize = item => {\n      if (this.state.size === \"Size\") {\n        return true;\n      } else if (this.state.size === item.size) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.filterItems = item => {\n      return this.matchesFilterSize(item);\n    };\n\n    this.sortLowToHigh = (a, b) => {} // TODO: Write a comparator function that sorts your items from lowest to highest price\n\n    /**\n     * Called when the \"Lowest to Highest\" price filter is selected in the dropdown\n     */\n    ;\n\n    this.onPriceLowToHigh = () => {} // TODO: Set your price sort state to the sortLowToHigh comparator\n\n    /**\n     * This function is called when the user adds an item from the Shop to the Cart. This function is hard so we have \n     * provided pseudocode to help you think through it!\n     */\n    ;\n\n    this.addToCart = item => {} // If the item has already been added to the cart \n    //    Then the old cartContents list is copied to the updatedContents list.\n    //    We then update the newly added object in the updatedContents list with the new quantity. \n    //    Set the state cartContents to updatedContents - this state can then be passed to other classes!\n    // If the item is not in the cart\n    //    Then the old cartContents list is copied to the updatedContents list, AND the new item is added to the updatedContents list. \n    //  Set the state cartContents to updatedContents\n\n    /**\n     * This function removes an item from the Cart by filtering the cartContents to only render items other than the removed item.\n     */\n    ;\n\n    this.removeFromCart = item => {} //TODO: Write a function that only renders items that are in the cart\n\n    /* \n    Calculate the total price of the items in the cart. \n    */\n    ;\n\n    this.calculateTotal = contents => {//TODO: Calculate the total price of the cart. Remember, you want to be able to pass the total price to the Cart component as well!\n    };\n\n    this.state = {\n      cartContents: [],\n      size: \"Size\"\n    };\n  }\n  /**\n   * This function is called every time a new Size filter is selected. Your job is to handle the state\n   * changes that should occur when a new filter type is selected.\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cards-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      bg: \"light\",\n      expand: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Size:\", React.createElement(Navbar.Toggle, {\n      \"aria-controls\": \"basic-navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Nav, {\n      defaultActiveKey: \"Size\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Size\",\n      onSelect: this.props.onSelectFilterSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"All\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Desktop\",\n      onSelect: this.props.onSelectFilterSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Desktop\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Medium\",\n      onSelect: this.props.onSelectFilterSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Medium\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Large\",\n      onSelect: this.props.onSelectFilterSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Large\")))), React.createElement(ProductGrid, {\n      list: this.props.list.filter(this.filterItems),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"cart-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Cart, {\n      contents: this.state.contents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Shop;","map":{"version":3,"sources":["/Users/mirandamo/Documents/3rd_Year/TA_CS1300/1300Development/src/components/Shop.js"],"names":["React","ProductGrid","Cart","Nav","Navbar","Shop","Component","constructor","props","onSelectFilterSize","event","setState","size","matchesFilterSize","item","state","filterItems","sortLowToHigh","a","b","onPriceLowToHigh","addToCart","removeFromCart","calculateTotal","contents","cartContents","render","list","filter"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport ProductGrid from \"./ProductGrid\";\nimport Cart from \"./Cart\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\n\n/**\n * This class contains all of the web app's major functionalities. This includes filtering, sorting, add to/remove from cart, and \n * increase/decrease quantity. \n */\nclass Shop extends React.Component {\n  constructor(props) {\n    super(props);\n    // A state is a variable or set of variables which is remembered when the component re-renders.\n    //TODO: Add additional state variables within this.state for another filter and a price sort, then set them to a default value. Remember, states can also be functions!\n    this.state = {\n      cartContents: [],\n      size: \"Size\"\n    };\n  }\n\n  /**\n   * This function is called every time a new Size filter is selected. Your job is to handle the state\n   * changes that should occur when a new filter type is selected.\n   */\n  onSelectFilterSize = event => {\n    this.setState({\n      size: event\n    })\n  };\n  /**\n   * This function determines whether the item being passed in matches the Size that we are filtering on. Remember that the selected type\n   * we are filtering on is stored in this.state!\n   */\n  matchesFilterSize = item => {\n    if (this.state.size === \"Size\") {\n      return true\n    } else if (this.state.size === item.size) {\n      return true\n    } else {\n      return false\n    }\n  }\n  /**\n   * This function is passed into a built-in filter() function. filter() calls this function on every element\n   * in the list. If this function returns true for a given element, filter() will add that element to its\n   * return list, which is the list of filtered plants. \n   */\n  filterItems = item => {\n    return this.matchesFilterSize(item);\n  }\n\n  /**\n   * Compare two plants in the list, and sorts them in price increasing order\n   */\n  sortLowToHigh = (a, b) => {\n    // TODO: Write a comparator function that sorts your items from lowest to highest price\n  }\n\n  /**\n   * Called when the \"Lowest to Highest\" price filter is selected in the dropdown\n   */\n  onPriceLowToHigh = () => {\n    // TODO: Set your price sort state to the sortLowToHigh comparator\n  }\n\n\n  /**\n   * This function is called when the user adds an item from the Shop to the Cart. This function is hard so we have \n   * provided pseudocode to help you think through it!\n   */\n  addToCart = (item) => {\n    // If the item has already been added to the cart \n    //    Then the old cartContents list is copied to the updatedContents list.\n    //    We then update the newly added object in the updatedContents list with the new quantity. \n    //    Set the state cartContents to updatedContents - this state can then be passed to other classes!\n    // If the item is not in the cart\n    //    Then the old cartContents list is copied to the updatedContents list, AND the new item is added to the updatedContents list. \n    //  Set the state cartContents to updatedContents\n  }\n\n  /**\n   * This function removes an item from the Cart by filtering the cartContents to only render items other than the removed item.\n   */\n  removeFromCart = (item) => {\n    //TODO: Write a function that only renders items that are in the cart\n  }\n\n  /* \n  Calculate the total price of the items in the cart. \n  */\n  calculateTotal = contents => {\n    //TODO: Calculate the total price of the cart. Remember, you want to be able to pass the total price to the Cart component as well!\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"cards-container\">\n          {/* TODO: Add more menu items with onSelect handlers. Might be helpful to pass it into a Filter Bar component when you have more selections!*/}\n          <Navbar bg=\"light\" expand=\"lg\">\n            Size:\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Nav defaultActiveKey=\"Size\">\n              <Nav.Item><Nav.Link eventKey=\"Size\" onSelect={this.props.onSelectFilterSize}>All</Nav.Link></Nav.Item>\n              <Nav.Item><Nav.Link eventKey=\"Desktop\" onSelect={this.props.onSelectFilterSize}>Desktop</Nav.Link></Nav.Item>\n              <Nav.Item><Nav.Link eventKey=\"Medium\" onSelect={this.props.onSelectFilterSize}>Medium</Nav.Link></Nav.Item>\n              <Nav.Item><Nav.Link eventKey=\"Large\" onSelect={this.props.onSelectFilterSize}>Large</Nav.Link></Nav.Item>\n            </Nav>\n          </Navbar>\n          {/* An instance of the ProductGrid Component that filters your items from App.js */}\n          <ProductGrid list={this.props.list.filter(this.filterItems)} />\n        </div>\n        {/* An instance of the Cart Component that takes in your cartContents */}\n        <div className=\"cart-container\">\n          <Cart contents={this.state.contents} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Shop;"]},"metadata":{},"sourceType":"module"}