{"ast":null,"code":"import _defineProperty from \"/Users/mirandamo/Documents/GitHub/cs1300-development-2020-sln/shopping-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mirandamo/Documents/GitHub/cs1300-development-2020-sln/shopping-app/src/components/Shop.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport \"../css/Shop.css\";\nimport ProductGrid from \"./ProductGrid\";\nimport Cart from \"./Cart\";\nimport Header from \"./Header\";\n/**\n * This class contains all of the web app's major functionalities. This includes filtering, sorting, add to/remove from cart, and \n * increase/decrease quantity. \n */\n\nclass Shop extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelectFilterSize = event => {\n      this.setState({\n        size: event\n      });\n    };\n\n    this.onSelectFilterLight = event => {\n      this.setState({\n        light: event\n      });\n    };\n\n    this.matchesFilterSize = item => {\n      if (this.state.size === \"Size\") {\n        return true;\n      } else if (this.state.size === item.size) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.matchesFilterLight = item => {\n      if (this.state.light === \"Light\") {\n        return true;\n      } else if (this.state.light === item.light) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.filterItems = item => {\n      return this.matchesFilterSize(item) && this.matchesFilterLight(item);\n    };\n\n    this.sortLowToHigh = (a, b) => a.price > b.price ? 1 : -1;\n\n    this.sortHighToLow = (a, b) => a.price < b.price ? 1 : -1;\n\n    this.onPriceLowToHigh = () => {\n      let lowToHigh = \"Lowest to Highest\";\n      this.setState({\n        sortPrice: this.sortLowToHigh\n      });\n      this.setState({\n        priceTitle: lowToHigh\n      });\n    };\n\n    this.onPriceHighToLow = () => {\n      let highToLow = \"Highest to Lowest\";\n      this.setState({\n        sortPrice: this.sortHighToLow\n      });\n      this.setState({\n        priceTitle: highToLow\n      });\n    };\n\n    this.onPriceSelect = () => {\n      let select = \"Select\";\n      this.setState({\n        sortPrice: undefined\n      });\n      this.setState({\n        priceTitle: select\n      });\n    };\n\n    this.addToCart = item => {\n      let updatedContents; // The some() method checks if any of the elements in an array pass a test (provided as a function). Here, the checking condition is whether the name of the added item matches an existing index in the updatedContents list, which is the Cart.\n\n      if (this.state.cartContents.some(el => item.name === el.name)) {\n        let index = this.state.cartContents.findIndex(el => el.name === item.name); // If it is true, then the old cartContents list is copied to the updatedContents list.\n\n        updatedContents = [...this.state.cartContents]; // We also update the located index in the updatedContents list with the copied item's name and sum of original and new quantity.\n\n        updatedContents[index] = _objectSpread({}, updatedContents[index], {\n          quantity: parseFloat(updatedContents[index].quantity) + parseFloat(item.quantity)\n        }); // Set the Cart to the updatedContents\n\n        this.setState({\n          cartContents: updatedContents\n        });\n      } else {\n        // If the item is not in the Cart, copy the old cartContents and add the new item\n        updatedContents = [...this.state.cartContents, item]; // Set the Cart to the updatedContents\n\n        this.setState({\n          cartContents: updatedContents\n        });\n      } // Calculate the total price of the items in the Cart\n\n\n      this.calculateTotal(updatedContents);\n    };\n\n    this.removeFromCart = item => {\n      const updatedContents = this.state.cartContents.filter(el => el.name !== item.name);\n      this.setState({\n        cartContents: updatedContents\n      });\n      this.calculateTotal(updatedContents);\n    };\n\n    this.onDecrease = item => {\n      // The find() method returns the value of the first element in the provided array that satisfies the provided testing function. In this case, it returns the selected item's instance in the Cart.\n      const itemObject = this.state.cartContents.find(obj => obj.name === item); // The indexOf() method locates the index of the found item in the cart.\n\n      if (itemObject.quantity > 1) {\n        const index = this.state.cartContents.indexOf(itemObject); // Update the quantity of the item in the cart\n\n        this.state.cartContents[index].quantity = this.state.cartContents[index].quantity - 1;\n      }\n    };\n\n    this.onIncrease = item => {\n      const itemObject = this.state.cartContents.find(obj => obj.name === item);\n      const index = this.state.cartContents.indexOf(itemObject);\n      this.state.cartContents[index].quantity = this.state.cartContents[index].quantity + 1;\n    };\n\n    this.calculateTotal = contents => {\n      this.setState({\n        // The reduce() method executes a reducer function (in this case, multiplying an item's price and quantity) on each element of the array, resulting in single output value (subtotal of your Cart). The accumulator, whose value is remembered across each iteration throughout the array, ultimately becomes the final, single resulting value.\n        total: contents.reduce((accumulatedTotal, cartItem) => accumulatedTotal + cartItem.price * cartItem.quantity, 0)\n      });\n    };\n\n    this.state = {\n      cartContents: [],\n      size: \"Size\",\n      light: \"Light\",\n      sortPrice: undefined,\n      priceTitle: \"Select\"\n    };\n  }\n  /**\n   * This function is called every time a new Size filter is selected.\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cards-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Header, {\n      onSelectFilterSize: this.onSelectFilterSize,\n      onSelectFilterLight: this.onSelectFilterLight,\n      onPriceLowToHigh: this.onPriceLowToHigh,\n      onPriceHighToLow: this.onPriceHighToLow,\n      onPriceSelect: this.onPriceSelect,\n      priceTitle: this.state.priceTitle,\n      handlePriceTitle: this.handleSortPriceTitle,\n      size: this.state.size,\n      light: this.state.light,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), this.props.list.filter(this.filterItems).length > 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(ProductGrid, {\n      list: this.props.list.filter(this.filterItems).sort(this.state.sortPrice),\n      isInCart: false,\n      onSubmit: this.addToCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"No results match the filters :(\"))), React.createElement(\"div\", {\n      className: \"cart-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Cart, {\n      contents: this.state.cartContents,\n      onSubmit: this.removeFromCart,\n      onIncrease: this.onIncrease,\n      onDecrease: this.onDecrease,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Shop;","map":{"version":3,"sources":["/Users/mirandamo/Documents/GitHub/cs1300-development-2020-sln/shopping-app/src/components/Shop.js"],"names":["React","ProductGrid","Cart","Header","Shop","Component","constructor","props","onSelectFilterSize","event","setState","size","onSelectFilterLight","light","matchesFilterSize","item","state","matchesFilterLight","filterItems","sortLowToHigh","a","b","price","sortHighToLow","onPriceLowToHigh","lowToHigh","sortPrice","priceTitle","onPriceHighToLow","highToLow","onPriceSelect","select","undefined","addToCart","updatedContents","cartContents","some","el","name","index","findIndex","quantity","parseFloat","calculateTotal","removeFromCart","filter","onDecrease","itemObject","find","obj","indexOf","onIncrease","contents","total","reduce","accumulatedTotal","cartItem","render","handleSortPriceTitle","list","length","sort"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../css/Shop.css\";\nimport ProductGrid from \"./ProductGrid\";\nimport Cart from \"./Cart\";\nimport Header from \"./Header\"\n\n/**\n * This class contains all of the web app's major functionalities. This includes filtering, sorting, add to/remove from cart, and \n * increase/decrease quantity. \n */\nclass Shop extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cartContents: [],\n      size: \"Size\",\n      light: \"Light\",\n      sortPrice: undefined,\n      priceTitle: \"Select\",\n    };\n  }\n\n  /**\n   * This function is called every time a new Size filter is selected.\n   */\n  onSelectFilterSize = event => {\n    this.setState({ size: event })\n  };\n\n  /**\n   * Called every time a new Lighting filter is selected.\n   */\n  onSelectFilterLight = event => {\n    this.setState({ light: event })\n  };\n\n  /**\n   * Determines whether the item being passed in matches the Size that we are filtering on.\n   */\n  matchesFilterSize = item => {\n    if (this.state.size === \"Size\") {\n      return true\n    } else if (this.state.size === item.size) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   *  Determines whether the item being passed in matches the Lighting that we are filtering on.\n   */\n  matchesFilterLight = item => {\n    if (this.state.light === \"Light\") {\n      return true\n    } else if (this.state.light === item.light) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Passed into a builtin filter() function. filter() calls this function on every element\n   * in the list. If this function returns true for a given element, filter() will add that element to its\n   * return list, which is the list of filtered plants. \n   */\n  filterItems = item => {\n    return this.matchesFilterSize(item) && this.matchesFilterLight(item);\n  }\n\n  /**\n   * Compares two plants in the list, and sorts them in price increasing order\n   */\n  sortLowToHigh = (a, b) => (a.price > b.price) ? 1 : -1\n\n  /**\n   * Compares two plants in the list, and sorts them in price decreasing order\n   */\n  sortHighToLow = (a, b) => (a.price < b.price) ? 1 : -1\n\n  /**\n   * Called when the \"Lowest to Highest\" price filter is selected in the dropdown\n   */\n  onPriceLowToHigh = () => {\n    let lowToHigh = \"Lowest to Highest\";\n    this.setState({ sortPrice: this.sortLowToHigh });\n    this.setState({ priceTitle: lowToHigh })\n  }\n\n  /**\n   * Called when the \"Highest to Lowest\" price filter is selected in the dropdown\n   */\n  onPriceHighToLow = () => {\n    let highToLow = \"Highest to Lowest\";\n    this.setState({ sortPrice: this.sortHighToLow });\n    this.setState({ priceTitle: highToLow })\n  }\n\n  /**\n   * Called when the price filter is reverted to \"Select\" in the dropdown\n   */\n  onPriceSelect = () => {\n    let select = \"Select\";\n    this.setState({ sortPrice: undefined });\n    this.setState({ priceTitle: select })\n  }\n\n\n  /**\n   * This function is called when the user adds an item from the Cactus Shop list to the Shopping Cart. \n   */\n  addToCart = (item) => {\n    let updatedContents;\n    // The some() method checks if any of the elements in an array pass a test (provided as a function). Here, the checking condition is whether the name of the added item matches an existing index in the updatedContents list, which is the Cart.\n    if (this.state.cartContents.some(el => item.name === el.name)) {\n      let index = this.state.cartContents.findIndex(el => el.name === item.name);\n      // If it is true, then the old cartContents list is copied to the updatedContents list.\n      updatedContents = [...this.state.cartContents];\n      // We also update the located index in the updatedContents list with the copied item's name and sum of original and new quantity.\n      updatedContents[index] = { ...updatedContents[index], quantity: parseFloat(updatedContents[index].quantity) + parseFloat(item.quantity) }\n      // Set the Cart to the updatedContents\n      this.setState({ \n        cartContents: updatedContents \n      });\n    } else {\n      // If the item is not in the Cart, copy the old cartContents and add the new item\n      updatedContents = [...this.state.cartContents, item];\n      // Set the Cart to the updatedContents\n      this.setState({\n        cartContents: updatedContents\n      })\n    }\n    // Calculate the total price of the items in the Cart\n    this.calculateTotal(updatedContents);\n  }\n\n  /**\n   * This function removes an item from the Cart by filtering the cartContents to only render items other than the removed item.\n   */\n  removeFromCart = (item) => {\n    const updatedContents = this.state.cartContents.filter(el => el.name !== item.name);\n    this.setState({\n      cartContents: updatedContents\n    })\n    this.calculateTotal(updatedContents);\n  }\n\n  /* \n  Decrease the quantity of an item in the Cart when the user decreases the item's amount. \n  */\n  onDecrease = (item) => {\n    // The find() method returns the value of the first element in the provided array that satisfies the provided testing function. In this case, it returns the selected item's instance in the Cart.\n    const itemObject = this.state.cartContents.find(obj => obj.name === item);\n    // The indexOf() method locates the index of the found item in the cart.\n    if (itemObject.quantity > 1) {\n      const index = this.state.cartContents.indexOf(itemObject);\n      // Update the quantity of the item in the cart\n      this.state.cartContents[index].quantity = this.state.cartContents[index].quantity - 1;\n    }\n  }\n\n  /* \n  Increases the quantity of an item in the Cart when the user increases the item's amount. Logic same as the onDecrease function. \n  */\n  onIncrease = (item) => {\n    const itemObject = this.state.cartContents.find(obj => obj.name === item);\n    const index = this.state.cartContents.indexOf(itemObject);\n    this.state.cartContents[index].quantity = this.state.cartContents[index].quantity + 1;\n  }\n\n  /* \n  Calculates the total price of the items in the cart. \n  */\n  calculateTotal = contents => {\n    this.setState({\n      // The reduce() method executes a reducer function (in this case, multiplying an item's price and quantity) on each element of the array, resulting in single output value (subtotal of your Cart). The accumulator, whose value is remembered across each iteration throughout the array, ultimately becomes the final, single resulting value.\n      total: contents.reduce(\n        (accumulatedTotal, cartItem) =>\n          accumulatedTotal + cartItem.price * cartItem.quantity,\n        0\n      )\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"cards-container\">\n          {/* The Size and Lighting filters, Price sort functions are passed to the Header. */}\n          <Header onSelectFilterSize={this.onSelectFilterSize} onSelectFilterLight={this.onSelectFilterLight} onPriceLowToHigh={this.onPriceLowToHigh} onPriceHighToLow={this.onPriceHighToLow} onPriceSelect={this.onPriceSelect} priceTitle={this.state.priceTitle} handlePriceTitle={this.handleSortPriceTitle} size={this.state.size} light={this.state.light} />\n          {/* The Cactus Shop renders items based on the selected filters. We used JavaScript's conditional operator as a shorthand of the if else statement.*/}\n          {this.props.list.filter(this.filterItems).length > 0 ?\n            <div>\n              {/*True condition: If there are items that match the filters, render the list of items.*/}\n              <ProductGrid list={this.props.list.filter(this.filterItems).sort(this.state.sortPrice)} isInCart={false} onSubmit={this.addToCart} />\n            </div>\n            :\n            <div>\n              {/*False condition: If no items match the filters, then a \"No results\" message is shown.*/}\n              <p>No results match the filters :(</p>\n            </div>\n          }\n        </div>\n        {/* Passing the items in the cart to the Cart class*/}\n        <div className=\"cart-container\">\n          <Cart contents={this.state.cartContents} onSubmit={this.removeFromCart} onIncrease={this.onIncrease} onDecrease={this.onDecrease} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Shop;"]},"metadata":{},"sourceType":"module"}